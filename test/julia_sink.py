 #sink to store files of single scans
    sink = Node(nio.DataSink(parameterization=False,
                             base_directory=out_dir,
                             substitutions=[('fmap1_phase_fslprepared', 'fieldmap'),
                                            ('fmap2_phase_fslprepared', 'fieldmap'),
                                            ('fieldmap_fslprepared_fieldmap_unmasked_vsm', 'shiftmap'),
                                            ('plot.rest_coregistered', 'outlier_plot'),
                                            ('filter_motion_comp_norm_compcor_art_dmotion', 'nuissance_matrix'),
                                            ('rest_realigned.nii.gz_abs.rms', 'rest_realigned_abs.rms'),
                                            ('rest_realigned.nii.gz.par','rest_realigned.par'),
                                            ('rest_realigned.nii.gz_rel.rms', 'rest_realigned_rel.rms'),
                                            ('rest_realigned.nii.gz_abs_disp', 'abs_displacement_plot'),
                                            ('rest_realigned.nii.gz_rel_disp', 'rel_displacment_plot'),
                                            ('art.rest_coregistered_outliers', 'outliers'),
                                            ('global_intensity.rest_coregistered', 'global_intensity'),
                                            ('norm.rest_coregistered', 'composite_norm'),
                                            ('stats.rest_coregistered', 'stats'),
                                            ('rest_denoised_bandpassed_norm.nii.gz', 'rest_preprocessed.nii.gz')
                                            ]),
                 name='sink')
    
    # connections
    func_preproc.connect([
                          (scan_infosource, sink, [('scan_id', 'container')]),
                          (selectfiles, remove_vol, [('func', 'in_file')]),
                          (remove_vol, moco, [('out_file', 'inputnode.epi')]),
                          (selectfiles, fmap_coreg, [('fmap_phase', 'inputnode.phase'),
                                                     ('fmap_mag', 'inputnode.mag'),
                                                     ('anat_head', 'inputnode.anat_head'),
                                                     ('anat_brain', 'inputnode.anat_brain')
                                                     ]),
                          (moco, fmap_coreg, [('outputnode.epi_mean', 'inputnode.epi_mean')]),
                          (remove_vol, transform_ts, [('out_file', 'inputnode.orig_ts')]),
                          (selectfiles, transform_ts, [('anat_head', 'inputnode.anat_head')]),
                          (moco, transform_ts, [('outputnode.mat_moco', 'inputnode.mat_moco')]),
                          (fmap_coreg, transform_ts, [('outputnode.fmap_fullwarp', 'inputnode.fullwarp')]),
                          (selectfiles, denoise, [('brain_mask', 'inputnode.brain_mask'),
                                                  ('anat_brain', 'inputnode.anat_brain')]),
                          (fmap_coreg, denoise, [('outputnode.epi2anat_dat', 'inputnode.epi2anat_dat'),
                                                 ('outputnode.unwarped_mean_epi2fmap', 'inputnode.unwarped_mean')]),
                          (moco, denoise, [('outputnode.par_moco', 'inputnode.moco_par')]),
                          (transform_ts, denoise, [('outputnode.trans_ts','inputnode.epi_coreg')]),

                          (moco, sink, [#('outputnode.epi_moco', 'realign.@realigned_ts'),
                                        ('outputnode.par_moco', 'realign.@par'),
                                        ('outputnode.rms_moco', 'realign.@rms'),
                                        ('outputnode.mat_moco', 'realign.MAT.@mat'),
                                        ('outputnode.epi_mean', 'realign.@mean'),
                                        ('outputnode.rotplot', 'realign.plots.@rotplot'),
                                        ('outputnode.transplot', 'realign.plots.@transplot'),
                                        ('outputnode.dispplots', 'realign.plots.@dispplots'),
                                        ('outputnode.tsnr_file', 'realign.@tsnr')]),
                          (fmap_coreg, sink, [('outputnode.fmap','coregister.transforms2anat.@fmap'),
                                              #('outputnode.unwarpfield_epi2fmap', 'coregister.@unwarpfield_epi2fmap'),
                                              ('outputnode.unwarped_mean_epi2fmap', 'coregister.@unwarped_mean_epi2fmap'),
                                              ('outputnode.epi2fmap', 'coregister.@epi2fmap'),
                                              #('outputnode.shiftmap', 'coregister.@shiftmap'),
                                              ('outputnode.fmap_fullwarp', 'coregister.transforms2anat.@fmap_fullwarp'),
                                              ('outputnode.epi2anat', 'coregister.@epi2anat'),
                                              ('outputnode.epi2anat_mat', 'coregister.transforms2anat.@epi2anat_mat'),
                                              ('outputnode.epi2anat_dat', 'coregister.transforms2anat.@epi2anat_dat'),
                                              ('outputnode.epi2anat_mincost', 'coregister.@epi2anat_mincost')
                                              ]),
                          (transform_ts, sink, [#('outputnode.trans_ts', 'coregister.@full_transform_ts'),
                                                ('outputnode.trans_ts_mean', 'coregister.@full_transform_mean'),
                                                ('outputnode.resamp_brain', 'coregister.@resamp_brain')]),
                          (denoise, sink, [('outputnode.wmcsf_mask', 'denoise.mask.@wmcsf_masks'),
                                           ('outputnode.combined_motion','denoise.artefact.@combined_motion'),
                                           ('outputnode.outlier_files','denoise.artefact.@outlier'),
                                           ('outputnode.intensity_files','denoise.artefact.@intensity'),
                                           ('outputnode.outlier_stats','denoise.artefact.@outlierstats'),
                                           ('outputnode.outlier_plots','denoise.artefact.@outlierplots'),
                                           ('outputnode.mc_regressor', 'denoise.regress.@mc_regressor'),
                                           ('outputnode.comp_regressor', 'denoise.regress.@comp_regressor'),
                                           ('outputnode.mc_F', 'denoise.regress.@mc_F'),
                                           ('outputnode.mc_pF', 'denoise.regress.@mc_pF'),
                                           ('outputnode.comp_F', 'denoise.regress.@comp_F'),
                                           ('outputnode.comp_pF', 'denoise.regress.@comp_pF'),
                                           ('outputnode.brain_mask_resamp', 'denoise.mask.@brain_resamp'),
                                           ('outputnode.brain_mask2epi', 'denoise.mask.@brain_mask2epi'),
                                           ('outputnode.normalized_file', '@normalized')
                                           ])
                          ])
    